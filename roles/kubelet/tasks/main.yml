---
- name: 拷贝kubelet证书到k8s节点上
  shell: sshpass -p '1' scp -oStrictHostKeyChecking=no root@hdss7-200:/opt/certs/kubelet*.pem /opt/kubernetes/server/bin/cert

- name: kubelet配置ca证书命令
  shell:
    cmd: kubectl config set-cluster myk8s --certificate-authority=/opt/kubernetes/server/bin/cert/ca.pem --embed-certs=true --server=https://"{{ virtual_ipaddress }}":7443 --kubeconfig=kubelet.kubeconfig
    chdir: /opt/kubernetes/server/bin/conf

  # server和client可以相互通信，因为client证书和server证书是基于一套ca证书签发的
- name: kubelet配置client证书命令
  shell:
    cmd: kubectl config set-credentials k8s-node --client-certificate=/opt/kubernetes/server/bin/cert/client.pem --client-key=/opt/kubernetes/server/bin/cert/client-key.pem --embed-certs=true --kubeconfig=kubelet.kubeconfig
    chdir: /opt/kubernetes/server/bin/conf

- name: kubelet配置节点命令, --user=k8s-node，是使其具有成为k8s运算节点的权限
  shell:
    cmd: kubectl config set-context myk8s-context --cluster=myk8s --user=k8s-node --kubeconfig=kubelet.kubeconfig
    chdir: /opt/kubernetes/server/bin/conf

- name: kubelet配置节点命令
  shell:
    cmd: kubectl config use-context myk8s-context --kubeconfig=kubelet.kubeconfig
    chdir: /opt/kubernetes/server/bin/conf

- name: 配置k8s-node.yml文件
  template:
    src: k8s-node.yaml.j2
    dest: /opt/kubernetes/server/bin/conf/k8s-node.yaml
    mode: 0644
  when: inventory_hostname == 'hdss7-21'

- name: 使用kubectl create创建资源
  shell:
    cmd: kubectl create -f k8s-node.yaml
    chdir: /opt/kubernetes/server/bin/conf
  when: inventory_hostname == 'hdss7-21'

- name: 查看集群角色权限绑定关系
  shell: kubectl get clusterrolebinding k8s-node
  register: std_out
  when: inventory_hostname == 'hdss7-21'

- name: 查看集群角色权限绑定关系输出结果
  debug: msg={{ std_out.stdout_lines }}
  when: inventory_hostname == 'hdss7-21'

#- hosts: '200'
#  gather_facts: no
#  user: root
#  tasks:
#    - name: 使用docker拉取pause基础镜像，kubelet在启动的时候需要准备pause基础镜像
#      # 边车模式，先有一个小镜像，kubelet能够控制这个小镜像，先于我们的业务容器起来
#      # 让它能够帮我们业务容器设置utils、NAT、和IPC，让这个小容器先把名称空间等占上
#      # 我业务容器还没有起来的时候，我们的pod IP已经分配好了，所以我们需要这个pause基础镜像
#      shell: docker pull kubernetes/pause
#
##      如果需要一键部署，则不需要进行下面的操作
##    - name: 将pause基础镜像推送到harbor中
##      shell: docker tag f9d5de079539 harbor.od.com/public/pause:latest
##
##    - name: 将pause基础镜像推送到harbor中
##      shell: docker push harbor.od.com/public/pause:latest

- name: 创建kebulet.sh文件
  template:
    src: kubelet.sh.j2
    dest: /opt/kubernetes/server/bin/kubelet.sh
    mode: 0755

- name: 创建kubelet.ini配置文件
  copy:
    src: kube-kubelet.ini.j2
    dest: /etc/supervisord.d/kube-kubelet.ini
    mode: 0644

- name: 创建kubelet相关目录
  shell: mkdir -p /data/logs/kubernetes/kube-kubelet /data/kubelet

- name: 使用supervisorctl启动kubelet
  shell: supervisorctl update

- name: 等待kubelet启动
  pause: seconds=30

  # 假如在生产环境，需要把主控节点和运算节点物理分开部署，
  # 如果不想让主控节点去运行业务节点，那么标签选择器的作用就体现了
- name: 给k8s node打标签，k8s node是k8s特色管理功能之一
  shell: kubectl label node hdss7-21.host.com node-role.kubernetes.io/master=
  when: inventory_hostname == 'hdss7-21'

- name: 给k8s node打标签
  shell: kubectl label node hdss7-21.host.com node-role.kubernetes.io/node=
  when: inventory_hostname == 'hdss7-21'

- name: 给k8s node打标签，k8s node是k8s特色管理功能之一
  shell: kubectl label node hdss7-22.host.com node-role.kubernetes.io/master=
  when: inventory_hostname == 'hdss7-21'

- name: 给k8s node打标签
  shell: kubectl label node hdss7-22.host.com node-role.kubernetes.io/node=
  when: inventory_hostname == 'hdss7-21'

- name: 查看k8s node节点
  shell: kubectl get nodes
  register: std_out
  when: inventory_hostname == 'hdss7-21'

- name: 查看输出结果
  debug: msg={{ std_out.stdout_lines }}
  when: inventory_hostname == 'hdss7-21'
